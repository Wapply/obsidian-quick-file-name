/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RandomNoteNameGenerator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  length: 10,
  useUppercase: true,
  useLowercase: true,
  useNumbers: false,
  useSymbols: false
};
var RandomNoteNameGeneratorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quick File Name Settings" });
    new import_obsidian.Setting(containerEl).setName("Length").setDesc("Number of characters in the random string").addText(
      (text) => text.setPlaceholder("Length").setValue(this.plugin.settings.length.toString()).onChange(async (value) => {
        this.plugin.settings.length = parseInt(value, 10);
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use Uppercase").setDesc("Include uppercase letters in the random string").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useUppercase).onChange(async (value) => {
        this.plugin.settings.useUppercase = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use Lowercase").setDesc("Include lowercase letters in the random string").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useLowercase).onChange(async (value) => {
        this.plugin.settings.useLowercase = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use Numbers").setDesc("Include numbers in the random string").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useNumbers).onChange(async (value) => {
        this.plugin.settings.useNumbers = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use Symbols").setDesc("Include symbols in the random string").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useSymbols).onChange(async (value) => {
        this.plugin.settings.useSymbols = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var RandomNoteNameGenerator = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: this.commandId,
      name: "Generate Random Note Name",
      hotkeys: [{ modifiers: ["Ctrl"], key: "r" }],
      callback: () => this.generateRandomNoteName()
    });
    this.addSettingTab(new RandomNoteNameGeneratorSettingTab(this.app, this));
    (0, import_obsidian2.addIcon)("new-random-note", `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22"/><path d="m18 2 4 4-4 4"/><path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2"/><path d="M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8"/><path d="m18 14 4 4-4 4"/>
            </svg>
        `);
    this.addRibbonIcon("infinity", "New Random Note", () => {
      this.generateRandomNoteName();
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async generateRandomNoteName() {
    const randomString = this.generateRandomString();
    try {
      const file = await this.app.vault.create(randomString + ".md", "");
      const leaf = this.app.workspace.getLeaf();
      await leaf.openFile(file);
      new import_obsidian2.Notice(`Opened new note: ${randomString}.md`);
    } catch (error) {
      new import_obsidian2.Notice(`Error opening new note: ${error.message}`);
    }
  }
  generateRandomString() {
    const { length, useUppercase, useLowercase, useNumbers, useSymbols } = this.settings;
    let result = "";
    const chars = useUppercase ? "ABCDEFGHIJKLMNOPQRSTUVWXYZ" : "";
    const chars2 = useLowercase ? "abcdefghijklmnopqrstuvwxyz" : "";
    const numbers = useNumbers ? "0123456789" : "";
    const symbols = useSymbols ? "!@#$%^&()-_[]{}+=" : "";
    const charSet = chars + chars2 + numbers + symbols;
    for (let i = 0; i < length; i++) {
      result += charSet.charAt(Math.floor(Math.random() * charSet.length));
    }
    return result;
  }
};
//# sourceMappingURL=data:application/json;base64,
